pipeline {
    agent {
        label 'Docker_Maven'
    }
    environment { 
        MAVEN_HOME = '/opt/apache-maven-3.9.9'
        PATH = "${MAVEN_HOME}/bin:${env.PATH}"
    }
    stages {
        stage('cleaning directory') {
            steps {
                deleteDir()
            }
        }
        stage('CloningGit') {
            steps {
                echo "<><><><><><><><><><>"
                echo "<>  Cloning Repo  <>"
                echo "<><><><><><><><><><>"
                sh 'git clone https://github.com/SarjakNEPAL/demo-example-pipeline.git .'
            }
        }
        stage('Building the app\' war file') {
            steps {
                echo "<><><><><><><><><><><><><>"
                echo "<>  Building from Pom  <>"
                echo "<><><><><><><><><><><><><>"
                sh 'mvn clean package'
            }
        }
        stage('creating app image') {
            steps { 
                echo "Building docker image" 
                sh 'docker build -t tomcat_app:$BUILD_NUMBER -f ./Dockerfile .' 
            } 
        }
        stage('Deploy to Staging Environment') {
            steps {
                echo "Running app on staging env"
                sh '''
                docker stop stagingEnv || true
                docker rm stagingEnv || true
                docker run -itd --name stagingEnv -p 2025:8080 tomcat_app:$BUILD_NUMBER
                '''
            }
        }
        stage('Deploying To Production') {
            steps {
                timeout(time: 2, unit: 'DAYS') {
                    input message: 'Do you approve?'
                }
                echo "Running app on productionEnvironment"
                sh '''
                docker stop productionEnv || true
                docker rm productionEnv || true
                docker run -itd --name productionEnv -p 2085:8080 tomcat_app:$BUILD_NUMBER
                '''
            }
        }
        stage('Docker Compose') {
            steps {
                echo "Deploying with Docker Compose"
                sh '''
                docker-compose -f ./docker-compose.yml up -d
                '''
            }
        }
        stage('Create Artifact') {
            steps {
                echo "Creating artifact"
                sh '''
                mkdir -p artifacts
                cp target/your-app-${BUILD_NUMBER}.war artifacts/
                '''
                archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
            }
        }
        stage('Ansible Deployment') {
            agent {
                label 'Ansible_Host'
            }
            steps {
                echo "Deploying with Ansible"
                sh '''
                ansible-playbook -i inventory ansible/deploy.yml --extra-vars "artifact_version=$BUILD_NUMBER"
                '''
            }
        }
    }
    post {
        success {
            mail to: 'bhandarisarjak@gmail.com',
                 subject: 'BUILD SUCCESS NOTIFICATION',
                 body: """Hi Sarjak,

Build #${BUILD_NUMBER} is successful, please go through the URL: ${BUILD_URL}

Regards,
Jenkins"""
        }
        failure {
            mail to: 'bhandarisarjak@gmail.com',
                 subject: 'BUILD FAILED NOTIFICATION',
                 body: """Hi Sarjak,

Build #${BUILD_NUMBER} failed, please go through the URL: ${BUILD_URL}

Regards,
Jenkins"""
        }
    }
}
